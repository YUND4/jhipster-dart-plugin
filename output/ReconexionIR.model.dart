class ReconexionModelIR with ModsimORM implements ModsimModel { 
  DateTime fechaGenerado;  int montoPagado;  String selloRemovido;  String selloInstalado;  DateTime fechaReconexion;  bool reconectado;  int reconectadoEn;  DateTime fechaPago;  int causaReconexion;  int tipoComentario;  String comentarios;  String nombreCliente;  bool servicio;  String direccion;  int cuenta;  int ruta;  int municipio;  String zona;  String tipoPredio;  int estadoId;  int ciclo;  double longitud;  double latitud;  int tipoObservacion;  String contador;  String telefono;  String celular;  String identificacion;  int id;  int idRemoto;  bool imagenesSync;  bool guardadoLocal;  ReconexionModelIR({    this.fechaGenerado,    this.montoPagado,    this.selloRemovido,    this.selloInstalado,    this.fechaReconexion,    this.reconectado,    this.reconectadoEn,    this.fechaPago,    this.causaReconexion,    this.tipoComentario,    this.comentarios,    this.nombreCliente,    this.servicio,    this.direccion,    this.cuenta,    this.ruta,    this.municipio,    this.zona,    this.tipoPredio,    this.estadoId,    this.ciclo,    this.longitud,    this.latitud,    this.tipoObservacion,    this.contador,    this.telefono,    this.celular,    this.identificacion,    this.id,    this.idRemoto,    this.imagenesSync,    this.guardadoLocal,  });
  @override
  ReconexionModelIR fromJSON(Map<String, dynamic> json) => ReconexionModelIR(
    fechaGenerado: json["fechaGenerado"],    montoPagado: json["montoPagado"],    selloRemovido: json["selloRemovido"],    selloInstalado: json["selloInstalado"],    fechaReconexion: json["fechaReconexion"],    reconectado: json["reconectado"],    reconectadoEn: json["reconectadoEn"],    fechaPago: json["fechaPago"],    causaReconexion: json["causaReconexion"],    tipoComentario: json["tipoComentario"],    comentarios: json["comentarios"],    nombreCliente: json["nombreCliente"],    servicio: json["servicio"],    direccion: json["direccion"],    cuenta: json["cuenta"],    ruta: json["ruta"],    municipio: json["municipio"],    zona: json["zona"],    tipoPredio: json["tipoPredio"],    estadoId: json["estadoId"],    ciclo: json["ciclo"],    longitud: json["longitud"],    latitud: json["latitud"],    tipoObservacion: json["tipoObservacion"],    contador: json["contador"],    telefono: json["telefono"],    celular: json["celular"],    identificacion: json["identificacion"],    id: json["id"],    idRemoto: json["idRemoto"],    imagenesSync: json["imagenesSync"],    guardadoLocal: json["guardadoLocal"],  );
  @override
  Map<String, dynamic> toJSON() => {
    "fechaGenerado": fechaGenerado is DateTime ? "${fechaGenerado.year.toString().padLeft(4, '0')}-${fechaGenerado.month.toString().padLeft(2, '0')}-${fechaGenerado.day.toString().padLeft(2, '0')}T${fechaGenerado.hour.toString().padLeft(2, '0')}:${fechaGenerado.minute.toString().padLeft(2, '0')}:${fechaGenerado.second.toString().padLeft(2, '0')}-05:00" : null,    "montoPagado": montoPagado,    "selloRemovido": selloRemovido,    "selloInstalado": selloInstalado,    "fechaReconexion": fechaReconexion is DateTime ? "${fechaReconexion.year.toString().padLeft(4, '0')}-${fechaReconexion.month.toString().padLeft(2, '0')}-${fechaReconexion.day.toString().padLeft(2, '0')}T${fechaReconexion.hour.toString().padLeft(2, '0')}:${fechaReconexion.minute.toString().padLeft(2, '0')}:${fechaReconexion.second.toString().padLeft(2, '0')}-05:00" : null,    "reconectado": reconectado,    "reconectadoEn": reconectadoEn,    "fechaPago": fechaPago is DateTime ? "${fechaPago.year.toString().padLeft(4, '0')}-${fechaPago.month.toString().padLeft(2, '0')}-${fechaPago.day.toString().padLeft(2, '0')}T${fechaPago.hour.toString().padLeft(2, '0')}:${fechaPago.minute.toString().padLeft(2, '0')}:${fechaPago.second.toString().padLeft(2, '0')}-05:00" : null,    "causaReconexion": causaReconexion,    "tipoComentario": tipoComentario,    "comentarios": comentarios,    "nombreCliente": nombreCliente,    "servicio": servicio,    "direccion": direccion,    "cuenta": cuenta,    "ruta": ruta,    "municipio": municipio,    "zona": zona,    "tipoPredio": tipoPredio,    "estadoId": estadoId,    "ciclo": ciclo,    "longitud": longitud,    "latitud": latitud,    "tipoObservacion": tipoObservacion,    "contador": contador,    "telefono": telefono,    "celular": celular,    "identificacion": identificacion,    "id": id,    "idRemoto": idRemoto,    "imagenesSync": imagenesSync,    "guardadoLocal": guardadoLocal,  };
  @override
  ReconexionModelIR fromSqlite(Map<String, dynamic> json) => ReconexionModelIR(
    fechaGenerado: json["fechaGenerado"]  is String ? DateTime.parse(json["fechaGenerado"]) : json["fechaGenerado"],    montoPagado: json["montoPagado"] ,    selloRemovido: json["selloRemovido"] ,    selloInstalado: json["selloInstalado"] ,    fechaReconexion: json["fechaReconexion"]  is String ? DateTime.parse(json["fechaReconexion"]) : json["fechaReconexion"],    reconectado: json["reconectado"]  = (json["reconectado"]  == null || json["reconectado"] == 0) ? false : true,    reconectadoEn: json["reconectadoEn"] ,    fechaPago: json["fechaPago"]  is String ? DateTime.parse(json["fechaPago"]) : json["fechaPago"],    causaReconexion: json["causaReconexion"] ,    tipoComentario: json["tipoComentario"] ,    comentarios: json["comentarios"] ,    nombreCliente: json["nombreCliente"] ,    servicio: json["servicio"]  = (json["servicio"]  == null || json["servicio"] == 0) ? false : true,    direccion: json["direccion"] ,    cuenta: json["cuenta"] ,    ruta: json["ruta"] ,    municipio: json["municipio"] ,    zona: json["zona"] ,    tipoPredio: json["tipoPredio"] ,    estadoId: json["estadoId"] ,    ciclo: json["ciclo"] ,    longitud: json["longitud"] ,    latitud: json["latitud"] ,    tipoObservacion: json["tipoObservacion"] ,    contador: json["contador"] ,    telefono: json["telefono"] ,    celular: json["celular"] ,    identificacion: json["identificacion"] ,    id: json["id"] ,    idRemoto: json["idRemoto"] ,    imagenesSync: json["imagenesSync"]  = (json["imagenesSync"]  == null || json["imagenesSync"] == 0) ? false : true,    guardadoLocal: json["guardadoLocal"]  = (json["guardadoLocal"]  == null || json["guardadoLocal"] == 0) ? false : true,  );
  @override
  Map<String, dynamic> toSqlite() => {
    "fechaGenerado": fechaGenerado is DateTime ? "${fechaGenerado.year.toString().padLeft(4, '0')}-${fechaGenerado.month.toString().padLeft(2, '0')}-${fechaGenerado.day.toString().padLeft(2, '0')}T${fechaGenerado.hour.toString().padLeft(2, '0')}:${fechaGenerado.minute.toString().padLeft(2, '0')}:${fechaGenerado.second.toString().padLeft(2, '0')}-05:00" : null,    "montoPagado": montoPagado,    "selloRemovido": selloRemovido,    "selloInstalado": selloInstalado,    "fechaReconexion": fechaReconexion is DateTime ? "${fechaReconexion.year.toString().padLeft(4, '0')}-${fechaReconexion.month.toString().padLeft(2, '0')}-${fechaReconexion.day.toString().padLeft(2, '0')}T${fechaReconexion.hour.toString().padLeft(2, '0')}:${fechaReconexion.minute.toString().padLeft(2, '0')}:${fechaReconexion.second.toString().padLeft(2, '0')}-05:00" : null,    "reconectado": reconectado == true ? 1 : 0,    "reconectadoEn": reconectadoEn,    "fechaPago": fechaPago is DateTime ? "${fechaPago.year.toString().padLeft(4, '0')}-${fechaPago.month.toString().padLeft(2, '0')}-${fechaPago.day.toString().padLeft(2, '0')}T${fechaPago.hour.toString().padLeft(2, '0')}:${fechaPago.minute.toString().padLeft(2, '0')}:${fechaPago.second.toString().padLeft(2, '0')}-05:00" : null,    "causaReconexion": causaReconexion,    "tipoComentario": tipoComentario,    "comentarios": comentarios,    "nombreCliente": nombreCliente,    "servicio": servicio == true ? 1 : 0,    "direccion": direccion,    "cuenta": cuenta,    "ruta": ruta,    "municipio": municipio,    "zona": zona,    "tipoPredio": tipoPredio,    "estadoId": estadoId,    "ciclo": ciclo,    "longitud": longitud,    "latitud": latitud,    "tipoObservacion": tipoObservacion,    "contador": contador,    "telefono": telefono,    "celular": celular,    "identificacion": identificacion,    "id": id,    "idRemoto": idRemoto,    "imagenesSync": imagenesSync == true ? 1 : 0,    "guardadoLocal": guardadoLocal == true ? 1 : 0,  };
  save() async{
    await initDatabase();
    ResponseDB r;
    if(this.id == 0 || this.id == null){
        this.id = null;
        r = await add('Reconexion', this);
    } else {
        r = await update('Reconexion', this);
    }
    return r;
  }
}
