class PersuasionModelIR with ModsimORM implements ModsimModel { 
  int cuenta;  int digitoChequeo;  DateTime fechaActualizacion;  String nombres;  String apellidos;  String identificacion;  String direccion;  String telefono;  String celular;  String mail;  int calidad;  int ciclo;  DateTime fechaVisita;  double saldo;  int periodoVencido;  int estado;  DateTime fechaGeneracion;  double longitud;  double latitud;  double altitud;  int satelite;  int atendidoPor;  String codigoAgua;  String codigoGas;  String ruta;  String total;  int tipoResidencia;  String numMinutos;  bool realizado;  String observacion;  int id;  int idRemoto;  bool imagenesSync;  bool guardadoLocal;  PersuasionModelIR({    this.cuenta,    this.digitoChequeo,    this.fechaActualizacion,    this.nombres,    this.apellidos,    this.identificacion,    this.direccion,    this.telefono,    this.celular,    this.mail,    this.calidad,    this.ciclo,    this.fechaVisita,    this.saldo,    this.periodoVencido,    this.estado,    this.fechaGeneracion,    this.longitud,    this.latitud,    this.altitud,    this.satelite,    this.atendidoPor,    this.codigoAgua,    this.codigoGas,    this.ruta,    this.total,    this.tipoResidencia,    this.numMinutos,    this.realizado,    this.observacion,    this.id,    this.idRemoto,    this.imagenesSync,    this.guardadoLocal,  });
            
  @override
  int employeeId;

  @override
  bool hasChanges;

  @override
  DateTime movilToWeb;

  @override
  DateTime webToMovil;


  @override
  PersuasionModelIR fromJSON(Map<String, dynamic> json) => PersuasionModelIR(
    cuenta: json["cuenta"],    digitoChequeo: json["digitoChequeo"],    fechaActualizacion: json["fechaActualizacion"],    nombres: json["nombres"],    apellidos: json["apellidos"],    identificacion: json["identificacion"],    direccion: json["direccion"],    telefono: json["telefono"],    celular: json["celular"],    mail: json["mail"],    calidad: json["calidad"],    ciclo: json["ciclo"],    fechaVisita: json["fechaVisita"],    saldo: json["saldo"],    periodoVencido: json["periodoVencido"],    estado: json["estado"],    fechaGeneracion: json["fechaGeneracion"],    longitud: json["longitud"],    latitud: json["latitud"],    altitud: json["altitud"],    satelite: json["satelite"],    atendidoPor: json["atendidoPor"],    codigoAgua: json["codigoAgua"],    codigoGas: json["codigoGas"],    ruta: json["ruta"],    total: json["total"],    tipoResidencia: json["tipoResidencia"],    numMinutos: json["numMinutos"],    realizado: json["realizado"],    observacion: json["observacion"],    id: json["id"],    idRemoto: json["idRemoto"],    imagenesSync: json["imagenesSync"],    guardadoLocal: json["guardadoLocal"],  );
  @override
  Map<String, dynamic> toJSON() => {
    "cuenta": cuenta,    "digitoChequeo": digitoChequeo,    "fechaActualizacion": fechaActualizacion is DateTime ? "${fechaActualizacion.year.toString().padLeft(4, '0')}-${fechaActualizacion.month.toString().padLeft(2, '0')}-${fechaActualizacion.day.toString().padLeft(2, '0')}T${fechaActualizacion.hour.toString().padLeft(2, '0')}:${fechaActualizacion.minute.toString().padLeft(2, '0')}:${fechaActualizacion.second.toString().padLeft(2, '0')}-05:00" : null,    "nombres": nombres,    "apellidos": apellidos,    "identificacion": identificacion,    "direccion": direccion,    "telefono": telefono,    "celular": celular,    "mail": mail,    "calidad": calidad,    "ciclo": ciclo,    "fechaVisita": fechaVisita is DateTime ? "${fechaVisita.year.toString().padLeft(4, '0')}-${fechaVisita.month.toString().padLeft(2, '0')}-${fechaVisita.day.toString().padLeft(2, '0')}T${fechaVisita.hour.toString().padLeft(2, '0')}:${fechaVisita.minute.toString().padLeft(2, '0')}:${fechaVisita.second.toString().padLeft(2, '0')}-05:00" : null,    "saldo": saldo,    "periodoVencido": periodoVencido,    "estado": estado,    "fechaGeneracion": fechaGeneracion is DateTime ? "${fechaGeneracion.year.toString().padLeft(4, '0')}-${fechaGeneracion.month.toString().padLeft(2, '0')}-${fechaGeneracion.day.toString().padLeft(2, '0')}T${fechaGeneracion.hour.toString().padLeft(2, '0')}:${fechaGeneracion.minute.toString().padLeft(2, '0')}:${fechaGeneracion.second.toString().padLeft(2, '0')}-05:00" : null,    "longitud": longitud,    "latitud": latitud,    "altitud": altitud,    "satelite": satelite,    "atendidoPor": atendidoPor,    "codigoAgua": codigoAgua,    "codigoGas": codigoGas,    "ruta": ruta,    "total": total,    "tipoResidencia": tipoResidencia,    "numMinutos": numMinutos,    "realizado": realizado,    "observacion": observacion,    "id": id,    "idRemoto": idRemoto,    "imagenesSync": imagenesSync,    "guardadoLocal": guardadoLocal,  };
  @override
  PersuasionModelIR fromSqlite(Map<String, dynamic> json) => PersuasionModelIR(
    cuenta: json["cuenta"] ,    digitoChequeo: json["digitoChequeo"] ,    fechaActualizacion: json["fechaActualizacion"]  is String ? DateTime.parse(json["fechaActualizacion"]) : json["fechaActualizacion"],    nombres: json["nombres"] ,    apellidos: json["apellidos"] ,    identificacion: json["identificacion"] ,    direccion: json["direccion"] ,    telefono: json["telefono"] ,    celular: json["celular"] ,    mail: json["mail"] ,    calidad: json["calidad"] ,    ciclo: json["ciclo"] ,    fechaVisita: json["fechaVisita"]  is String ? DateTime.parse(json["fechaVisita"]) : json["fechaVisita"],    saldo: json["saldo"] ,    periodoVencido: json["periodoVencido"] ,    estado: json["estado"] ,    fechaGeneracion: json["fechaGeneracion"]  is String ? DateTime.parse(json["fechaGeneracion"]) : json["fechaGeneracion"],    longitud: json["longitud"] ,    latitud: json["latitud"] ,    altitud: json["altitud"] ,    satelite: json["satelite"] ,    atendidoPor: json["atendidoPor"] ,    codigoAgua: json["codigoAgua"] ,    codigoGas: json["codigoGas"] ,    ruta: json["ruta"] ,    total: json["total"] ,    tipoResidencia: json["tipoResidencia"] ,    numMinutos: json["numMinutos"] ,    realizado: json["realizado"]  = (json["realizado"]  == null || json["realizado"] == 0) ? false : true,    observacion: json["observacion"] ,    id: json["id"] ,    idRemoto: json["idRemoto"] ,    imagenesSync: json["imagenesSync"]  = (json["imagenesSync"]  == null || json["imagenesSync"] == 0) ? false : true,    guardadoLocal: json["guardadoLocal"]  = (json["guardadoLocal"]  == null || json["guardadoLocal"] == 0) ? false : true,  );
  @override
  Map<String, dynamic> toSqlite() => {
    "cuenta": cuenta,    "digitoChequeo": digitoChequeo,    "fechaActualizacion": fechaActualizacion is DateTime ? "${fechaActualizacion.year.toString().padLeft(4, '0')}-${fechaActualizacion.month.toString().padLeft(2, '0')}-${fechaActualizacion.day.toString().padLeft(2, '0')}T${fechaActualizacion.hour.toString().padLeft(2, '0')}:${fechaActualizacion.minute.toString().padLeft(2, '0')}:${fechaActualizacion.second.toString().padLeft(2, '0')}-05:00" : null,    "nombres": nombres,    "apellidos": apellidos,    "identificacion": identificacion,    "direccion": direccion,    "telefono": telefono,    "celular": celular,    "mail": mail,    "calidad": calidad,    "ciclo": ciclo,    "fechaVisita": fechaVisita is DateTime ? "${fechaVisita.year.toString().padLeft(4, '0')}-${fechaVisita.month.toString().padLeft(2, '0')}-${fechaVisita.day.toString().padLeft(2, '0')}T${fechaVisita.hour.toString().padLeft(2, '0')}:${fechaVisita.minute.toString().padLeft(2, '0')}:${fechaVisita.second.toString().padLeft(2, '0')}-05:00" : null,    "saldo": saldo,    "periodoVencido": periodoVencido,    "estado": estado,    "fechaGeneracion": fechaGeneracion is DateTime ? "${fechaGeneracion.year.toString().padLeft(4, '0')}-${fechaGeneracion.month.toString().padLeft(2, '0')}-${fechaGeneracion.day.toString().padLeft(2, '0')}T${fechaGeneracion.hour.toString().padLeft(2, '0')}:${fechaGeneracion.minute.toString().padLeft(2, '0')}:${fechaGeneracion.second.toString().padLeft(2, '0')}-05:00" : null,    "longitud": longitud,    "latitud": latitud,    "altitud": altitud,    "satelite": satelite,    "atendidoPor": atendidoPor,    "codigoAgua": codigoAgua,    "codigoGas": codigoGas,    "ruta": ruta,    "total": total,    "tipoResidencia": tipoResidencia,    "numMinutos": numMinutos,    "realizado": realizado == true ? 1 : 0,    "observacion": observacion,    "id": id,    "idRemoto": idRemoto,    "imagenesSync": imagenesSync == true ? 1 : 0,    "guardadoLocal": guardadoLocal == true ? 1 : 0,  };
  save() async{
    await initDatabase();
    ResponseDB r;
    if(this.id == 0 || this.id == null){
        this.id = null;
        r = await add('Persuasion', this);
    } else {
        r = await update('Persuasion', this);
    }
    return r;
  }
}
